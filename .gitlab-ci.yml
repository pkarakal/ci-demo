image: golang:1.21.3-alpine

include:
  - template: Code-Quality.gitlab-ci.yml

stages:
  - build
  - test
  - release

.update_deps: &update_deps
  before_script:
    - apk update && apk upgrade
    - apk add gcc alpine-sdk

.docker_template: &docker_configuration
  stage: release
  image: docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:23.0.1-dind

build:
  <<: *update_deps
  stage: build
  script:
    - go build

lint:
  <<: *update_deps
  stage: build
  allow_failure: true
  script:
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    - golangci-lint run

test:
  <<: *update_deps
  needs:
    - build
    - vulnerability_scan
  stage: test
  script:
    - go test ./...
    - go test -cover ./...

vulnerability_scan:
  <<: *update_deps
  stage: build
  script:
    - go install golang.org/x/vuln/cmd/govulncheck@latest
    - govulncheck ./

docker:latest:
  <<: *docker_configuration
  needs:
    - build
    - vulnerability_scan
    - test
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE:latest .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master

docker:tags:
  <<: *docker_configuration
  needs:
    - build
    - vulnerability_scan
    - test
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
    - tags

docker:version:
  <<: *docker_configuration
  needs:
    - build
    - vulnerability_scan
    - test
  when: manual
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  only:
    - branches

code_quality:
  rules:
    - if: $CODE_QUALITY_DISABLED
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  artifacts:
    paths: [gl-code-quality-report.json]
